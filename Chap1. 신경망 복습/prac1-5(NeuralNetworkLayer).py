# 신경망 구성 예시
# 신경망에서 2차원 데이터를 다룸
# 입력층 노드 2개
# 첫번째 은닉층 노드 4개
# 출력층 노드 3개 
# 각 노드 이동시에는 이전 노드값에 가중치를 곱하고 편향을 더하는 식으로 처리

import numpy as np

# 활성화 함수로 사용할 시그모이드 함수 정의
def sigmoid(x):
    return 1/(1+np.exp(-x))

# 입력층 정의 : -1~1 사이의 값이 저장된 2차원 데이터 10개(미니배치를 10개로 하여 한 번에 10개 데이터 처리)
x = np.random.randn(10,2)
# 입력층 -> 첫번째 은닉층 처리를 위한 -1~1 사이의 값이 저장된 2×4 형상의 2차원 가중치 행렬
W1 = np.random.rand(2,4)
# 입력층 -> 첫번째 은닉층 처리를 위한 -1~1 사이의 값이 저장된 4 형상의 1차원 편향 행렬
b1 = np.random.randn(4)
# 첫번째 은닉층 -> 출력층 처리를 위한 -1~1 사이의 값이 저장된 4×3 형상의 2차원 가중치 행렬
W2 = np.random.randn(4,3)
# 첫번쨰 은닉층 -> 출력층 처리를 위한 -1~1 사이의 값이 저장된 3 형상의 1차원 편향 행렬
b2 = np.random.randn(3)

# 첫번째 은닉층 계산 : 입력값과 가중치를 곱하고 편향값을 더함
h = np.matmul(x, W1) + b1
# 은닉층 계산 결과를 시그모이드 활성화 함수에 입력하여 활성화 값 계산
a = sigmoid(h)
# 출력층 계산 : 첫번째 은닉층 활성화 값과 가중치를 곱하고 편향값을 더함
s = np.matmul(a, W2) + b2