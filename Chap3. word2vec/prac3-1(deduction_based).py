# 통계 기반 기법은 실제로 쓰이는 대규모 말뭉치에 대한 동시발생 행렬을 구현하기 현실적으로 쉽지 않다는 문제가 있음
# 추론 기반 기법에서는 말뭉치를 소량의 미니 배치로 나누어 미니 배치 샘플을 반복하여 학습함으로써 대규모의 말뭉치 데이터도 원활하게 처리 가능

# 추론 기반 기법은 기본적으로 주번 단어(맥락)이 주어졌을 때 가장 적절한 단어가 무엇인지 추론하는 작업을 통해 자연어를 처리
# 이러한 추론을 통해 단어의 출현 패턴을 학습하여 신경망 모델을 구현

# 신경망을 통한 단어 처리 방법
# 기본적으로 말뭉치의 단어들을 총 어휘 수만큼의 원소를 갖는 원-핫 벡터로 변환하여 해당되는 단어 인덱스 원소를 1로, 나머지는 0으로 설정

# 예시
# 'you say goodbye and I say hello"의 어휘 수는 7개이므로, 단어 벡터의 원소 수는 7개
# 입력층이 (단어 벡터 원소 수인) 7개 노드로 이루어져 있고, 은닉층이 3개라 가정하면 가중치는 7×3 형상의 행렬
# 위 신경망을 간단하게 구현

import numpy as np

# 인덱스가 0인 단어(you)의 원-핫 벡터를 입력값 c로 저장(미니 배치를 위해 입력값 c는 ndim(차원)이 2인 2차원 벡터)
c = np.array([[1, 0, 0, 0, 0, 0, 0]])
# 입력층 노드가 7개이고 은닉층 노드가 3개이므로 7×3 형상의 랜덤 0~1 사이 실수가 저장된 행렬을 가중치 W로 저장
W = np.random.randn(7,3)
# 입력층 c와 가중치 W의 행렬곱 연산을 하여 결과값을 은닉층 h로 저장 (편향은 적용하지 않음)
h = np.matmul(c, W)
# 원소가 3개인 은닉층 벡터를 출력
print(h)