# 벡터의 내적과 행렬의 곱

import numpy as np

# 백터의 내적 : 벡터(1차원 행렬)들의 대응하는 각 원소를 곱한 값들을 모두 더한 값
# 벡터의 내적을 통해 두 벡터가 얼마나 같은 방향을 향하고 있는가를 나타냄

# a에 [1,2,3] 벡터 저장
a = np.array([1,2,3])
# b에 [4,5,6] 벡터 저장
b = np.array([4,5,6])
# a 벡터와 b 벡터의 내적 계산
# 1×4 + 2×5 + 3×6 = 32
print(np.dot(a,b))


# 행렬의 곱 : 두 행렬 중 왼쪽 행렬의 행벡터(가로), 오른쪽 행렬의 열벡터(세로)의 내적으로 계산
# 각 열벡터와 행벡터 내적 계산 결과는 새로운 행렬의 대응되는 원소에 저장
# 예시 : A행렬과 B행렬을 행렬곱한다면
# A 행렬의 1행 벡터와 B 행렬의 1열 벡터는 새로운 행렬의 1행 1열에 저장
# A 행렬의 2행 벡터와 B 행렬의 3열 벡터는 새로운 행렬의 2행 3열에 저장

# A에 [[1,2],[3,4]] 2차원 행렬 저장
A = np.array([[1,2],[3,4]])
# B에 [[5,6],[7,8]] 2차원 행렬 저장
B = np.array([[5,6],[7,8]])
# A 행렬과 B행렬의 행렬곱 계산
# [1,2]     [5,6]
# [3,4]     [7,8]
# 행렬곱 결과의 1행 1열 : 1×5 + 2×7 = 19
# 행렬곱 결과의 1행 2열 : 1×6 + 2×8 = 22
# 행렬곱 결과의 2행 1열 : 3×5 + 4×7 = 43
# 행렬곱 결과의 2행 2열 : 3×6 + 4×8 = 50
# 행렬곱 결과 = [[19,22],[43,50]]
print(np.matmul(A,B))



# 행렬과 벡터를 이용하여 계산 시에는 형상에 주의
# 행렬곱 연산 시 왼쪽 행렬의 행 수와 오른쪽 행렬의 열 수를 일치시켜야 함
# A × B 행렬과 C × D 행렬을 행렬곱 연산하기 위해서 B == C 조건을 만족해야 함